version: '3'
services:
  db_brt:
    image: postgres
    container_name: postgres_brt
    shm_size: 128mb
    environment:
      POSTGRES_USER: dvpsqluser
      POSTGRES_PASSWORD: dvpsql
      POSTGRES_DB: brt_data
    expose:
      - "5437"
    ports:
      - "5437:5437"
    command: -p 5437
    volumes:
      - ./init_brt.sql:/docker-entrypoint-initdb.d/init.sql
      - /private/var/lib/db_cdr:/var/lib/postgresql
    restart: unless-stopped
    networks:
      - db_net
      - db_net_admin
  db_cdr:
    image: postgres
    container_name: postgres_cdr
    shm_size: 128mb
    environment:
      POSTGRES_USER: dvpsqluser
      POSTGRES_PASSWORD: dvpsql
      POSTGRES_DB: cdr_data
    expose:
      - "5438"
    ports:
      - "5438:5438"
    command: -p 5438
    volumes:
      - ./init_cdr.sql:/docker-entrypoint-initdb.d/init.sql
      - /private/var/lib/db_brt:/var/lib/postgresql
    restart: unless-stopped
    networks:
      - db_net
      - db_net_admin
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    ports:
      - 5454:5454
    networks:
      - db_net_admin
  zookeeper:
    image: wurstmeister/zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    restart: unless-stopped
    networks:
      - kafka_net
  kafka1:
    container_name: kafka_bro_1
    image: wurstmeister/kafka:latest
    ports:
      - "9092:9092"
    expose:
      - "9093"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka1:9093,OUTSIDE://kafka1:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9093,OUTSIDE://0.0.0.0:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CREATE_TOPICS: "data-topic:3:1, trigger-topic:2:1"
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - service_net
      - kafka_net
  kafka2:
    container_name: kafka_bro_2
    image: wurstmeister/kafka:latest
    ports:
      - "9094:9094"
    expose:
      - "9095"
    environment:
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka2:9095,OUTSIDE://kafka2:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_LISTENERS: INSIDE://0.0.0.0:9095,OUTSIDE://0.0.0.0:9094
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zookeeper:2181"
      KAFKA_BROKER_ID: 2
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "false"
      KAFKA_CREATE_TOPICS: "data-topic:3:1, trigger-topic:2:1"
    depends_on:
      - zookeeper
    restart: unless-stopped
    networks:
      - service_net
      - kafka_net
  hrs1:
    container_name: hrs_clone_1
    build:
      context: ./BootcampProjHrs/
      dockerfile: ./dockerfile
    networks:
      - db_net
      - service_net
    ports: 
      - "9997:8082"
    restart: unless-stopped
  hrs2:
    container_name: hrs_clone_2
    build:
      context: ./BootcampProjHrs/
      dockerfile: ./dockerfile
    networks:
      - db_net
      - service_net
    ports: 
      - "9998:8082"
    restart: unless-stopped
  nginx_hrs:
    container_name: nginx_hrs
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "9999:9999"
    volumes:
      - ./nginx_hrs.conf:/etc/nginx/nginx.conf
    depends_on:
      - hrs1
      - hrs2
    networks:
    - db_net
    - service_net
  brt:
    container_name: brt
    build:
      context: ./BootcampProjBrt/
      dockerfile: ./dockerfile
    networks:
      - db_net
      - service_net
      - kafka_net
    restart: unless-stopped
    ports:
      - "8078:8078"
    depends_on:
      - nginx_hrs
      - nginx_crm
      - db_brt
  cdr:
    container_name: cdr
    build:
      context: ./BootcampProjCdrGen/
      dockerfile: ./dockerfile
    networks:
      - db_net
      - kafka_net
    restart: unless-stopped
    depends_on:
      - brt
      - db_cdr
  crm1:
    container_name: crm_clone_1
    build:
      context: ./BootcampProjCrm/
      dockerfile: ./dockerfile
    networks:
      - service_net
    ports: 
      - "9987:8079"
    restart: unless-stopped
  crm2:
    container_name: crm_clone_2
    build:
      context: ./BootcampProjCrm/
      dockerfile: ./dockerfile
    networks:
      - service_net
    ports: 
      - "9988:8079"
    restart: unless-stopped
  nginx_crm:
    container_name: nginx_crm
    image: nginx:latest
    restart: unless-stopped
    ports:
      - "9989:9989"
    volumes:
      - ./nginx_crm.conf:/etc/nginx/nginx.conf
    depends_on:
      - crm1
      - crm2
    networks:
    - service_net
networks:
  db_net:
    driver: bridge
  db_net_admin:
    driver: bridge
  service_net:
    driver: bridge
  kafka_net:
    driver: bridge
    
    